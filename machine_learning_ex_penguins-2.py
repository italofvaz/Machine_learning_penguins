# -*- coding: utf-8 -*-
"""Machine_learning_ex_penguins.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Xe7re1ZKm0WKScHQdQauScvT7Cv6H83x

<img src="https://raw.githubusercontent.com/andre-marcos-perez/ebac-course-utils/main/media/logo/newebac_logo_black_half.png" alt="ebac-logo">

---

# **Módulo** | Análise de Dados: Fundamentos de Aprendizado de Máquina
Caderno de **Exercícios**<br>
Professor [André Perez](https://www.linkedin.com/in/andremarcosperez/)

---

# **Tópicos**

<ol type="1">
  <li>Teoria;</li>
  <li>Atributos categóricos;</li>
  <li>Atributos numéricos;</li>
  <li>Dados faltantes.</li>
</ol>

---

# **Exercícios**

## 1\. Pinguins

Neste exercício, vamos utilizar uma base de dados com informações sobre penguins. A idéia é preparar a base de dados para prever a espécie do penguin (variável resposta) baseado em suas características físicas e geográficas (variáveis preditivas).
"""

import os

username = "italofvaz" # insira o seu nome de usuário do git
os.environ["GITHUB_USER"] = username

!git config --global user.name "${GITHUB_USER}"

import os
from getpass import getpass

usermail = getpass()
os.environ["GITHUB_MAIL"] = usermail

!git config --global user.email "${GITHUB_MAIL}"

import os
from getpass import getpass

usertoken = getpass()
os.environ["GITHUB_TOKEN"] = usertoken

!git clone https://${GITHUB_USER}:${GITHUB_TOKEN}@github.com/italofvaz/Machine_learning_penguins.git

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/Machine_learning_penguins/

import numpy as np
import pandas as pd
import seaborn as sns

data = sns.load_dataset('penguins')

data.head()

"""### **1.1. Valores nulos**

A base de dados possui valores faltantes, utilize os conceitos da aula para trata-los.
"""

# Handling missing data in the database

nulos = data.isnull().sum()
print(nulos)

# In this case, let's replace the NaN values with the mean of the values
mean = data['body_mass_g'].mean()
print(mean)
data['body_mass_g'] = data['body_mass_g'].apply(lambda value: mean if pd.isnull(value) else value)

mean = data['bill_length_mm'].mean()
print(mean)
data['bill_length_mm'] = data['bill_length_mm'].apply(lambda value: mean if pd.isnull(value) else value)

mean = data['bill_depth_mm'].mean()
print(mean)
data['bill_depth_mm'] = data['bill_depth_mm'].apply(lambda value: mean if pd.isnull(value) else value)

mean = data['flipper_length_mm'].mean()
print(mean)
data['flipper_length_mm'] = data['flipper_length_mm'].apply(lambda value: mean if pd.isnull(value) else value)

count = data['sex'].value_counts()
most = count.idxmax()
data['sex'] = data['sex'].apply(lambda value: most if pd.isnull(value) else value)

nulos = data.isnull().sum()
print(nulos)

"""### **1.2. Variáveis numéricas**

Identifique as variáveis numéricas e crie uma nova coluna **padronizando** seus valores. A nova coluna deve ter o mesmo nome da coluna original acrescidade de "*_std*".

> **Nota**: Você não deve tratar a variável resposta.
"""

data.head()

mean = data['bill_length_mm'].mean()
desvio = data['bill_length_mm'].std()
data['bill_length_mm_std'] = data['bill_length_mm'].apply(lambda x: (x - mean)/ desvio)

mean = data['bill_depth_mm'].mean()
desvio = data['bill_depth_mm'].std()
data['bill_depth_mm_std'] = data['bill_depth_mm'].apply(lambda x: (x - mean)/ desvio)

mean = data['flipper_length_mm'].mean()
desvio = data['flipper_length_mm'].std()
data['flipper_length_mm_std'] = data['flipper_length_mm'].apply(lambda x: (x - mean)/ desvio)

mean = data['body_mass_g'].mean()
desvio = data['body_mass_g'].std()
data['body_mass_g_std'] = data['body_mass_g'].apply(lambda x: (x - mean)/ desvio)

"""### **1.3. Variáveis categóricas**

Identifique as variáveis categóricas nominais e ordinais, crie uma nova coluna aplicando a técnica correta de conversão a seus valores. A nova coluna deve ter o mesmo nome da coluna original acrescidade de "*_nom*" ou "*_ord*".

> **Nota**: Você não deve tratar a variável resposta.
"""

data['species'].drop_duplicates()

specie_dic = {"Adelie" : 1,
              "Chinstrap" : 2,
              "Gentoo" : 3}

data['species_ord'] = data['species'].apply(lambda x : specie_dic[x])

data['island'].drop_duplicates()

island_dic = {"Torgersen" : 1,
              "Biscoe" : 2,
              "Dream" : 3}

data['island_ord'] = data['island'].apply(lambda x : island_dic[x])

data['sex_m_nom'] = data['sex'].apply(lambda x : 1 if x == 'Male' else 0)
data['sex_f_nom'] = data['sex'].apply(lambda x : 1 if x == "Female" else 0)

"""### **1.4. Limpeza**

Descarte as colunas originais e mantenha apenas a variável resposta e as variáveis preditivas com o sufixo *_std*", *_nom*" e "*_ord*".
"""

data.head()

data = data[['bill_length_mm_std', 'bill_depth_mm_std', 'flipper_length_mm_std', 'body_mass_g_std', 'species_ord', 'island_ord', 'sex_m_nom', 'sex_f_nom']]

!git add .

!git commit -m "Project on data analysis and machine learning about restaurant tips"

"""---"""